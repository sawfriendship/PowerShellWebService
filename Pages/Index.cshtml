@page
@model IndexModel
@using System.Linq
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Home";
    bool IsDevelopment = Configuration.GetValue("IsDevelopment",false);
    var Query = Request.Query.ToDictionary(x => x.Key.ToString().ToLower(), x => x.Value.ToString());
    string PwShUrl = Configuration.GetValue("PwShUrl","api")!;
    bool IsAuthenticated = HttpContext.User.Identity.IsAuthenticated;
    bool SqlLoggingEnabled = Configuration.GetValue("SqlLogging:Enabled", false);
    string UserName = HttpContext.User.Identity!.Name ?? "%UserName%";
    bool UserIsInRoleAdmin = hasRole(HttpContext,"Admin");
    bool UserIsInRoleUser = hasRole(HttpContext,"User");
    // var UserRoles = getRoles(@Request.HttpContext);
}

@functions {
    public bool hasRole(HttpContext Context, string Role = "") {
        List<IConfigurationSection> Roles = Configuration.GetSection("Roles").GetChildren().Where(x => Role.Length == 0 || x.Key.ToLower() == Role.ToLower()).ToList();
        foreach (IConfigurationSection Role_ in Roles) {
            if (Configuration.GetSection(Role_.Path).GetChildren().Any(x => Context.User.IsInRole($"{x.Value}"))) {
                return true;
            };
        }
        return false;
    }
    public List<string> getRoles(HttpContext Context) {
        List<IConfigurationSection> Roles = Configuration.GetSection("Roles").GetChildren().ToList();
        List<string> Result = new();
        foreach (IConfigurationSection Role_ in Roles) {
            if (Configuration.GetSection(Role_.Path).GetChildren().Any(x => Context.User.IsInRole($"{x.Value}"))) {
                Result.Add(Role_.Key);
            };
        }
        return Result;
    }
}

@if (!IsAuthenticated && !IsDevelopment) {
    <div class="text-center"><h3>Вы не авторизованы</h3></div>
} else if (!hasRole(HttpContext) && !IsDevelopment) {
    <div class="text-center"><h3>У вас нет прав на просмотр этой страницы</h3></div>
} else {
    if (IsDevelopment) {
        <div class="text-center text-danger"><h3>Включен режим разработки, права пользователей не учитываются!</h3></div>
    }
    if (UserIsInRoleAdmin || IsDevelopment) {
        <h3>Вы зашли в роли администратора</h3>
        <p><b>Этот сервис предназначен для работы на веб-сервере IIS для упрощения обмена данными с PowerShell.</b></p>
        <br>
        <p>Он очень простой, потому что предназначен для тех, кому трудно разобраться в C#, но владеет другими языками и хочет получить мощность PowerShell</p>
        <br>
        <p>Вы можете написать веб-сервис на вашем любимом языке и использовать PowerShellWebService внутри него,<br> это может быть Go, Python, PHP, Perl, Java, JavaScript или что-то еще на ваше усмотрение.</p>
        <br>
        
        <p>И пожалуйста, не надо больше запускать PowerShell.exe и разбирать stdout,<br> ведь у него под капотом 6 потоков вывода вместо 2 и вы можете пропустить самое интересное :-) Смотрите ниже "Output Streams"</p>
        <p>Важно <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_output_streams?view=powershell-7.3">About PowerShell Output Streams</a>.</p>
        <p>Руководство <a href="https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/publish-to-iis?view=aspnetcore-7.0">Публикация приложения ASP.NET Core в службах IIS</a>.</p>
        <p>Руководство <a href="https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/min-web-api?view=aspnetcore-7.0">Создание минимального API с помощью ASP.NET Core</a>.</p>
        <p>Документация <a href="https://learn.microsoft.com/ru-ru/aspnet/core/?view=aspnetcore-7.0">ASP.NET</a>.</p>
    } else {
        <h3>Вы зашли в роли пользователя</h3>
        <p><b>Этот сервис предназначен для работы на веб-сервере IIS для упрощения обмена данными с PowerShell.</b></p>
        <br>
        <p>Он очень простой, потому что предназначен для тех, кому трудно разобраться в C#, но владеет другими языками и хочет получить мощность PowerShell</p>
        <br>
        <p>Вы можете написать веб-сервис на вашем любимом языке и использовать PowerShellWebService внутри него,<br> это может быть Go, Python, PHP, Perl, Java, JavaScript или что-то еще на ваше усмотрение.</p>
        <br>
    }
}


